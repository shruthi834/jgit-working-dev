import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;

import java.io.File;
import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.CompletableFuture;

public class ParallelJGitCloneExample {
    public static void main(String[] args) {
        String repoURL = "https://bitbucket.org/jgit-opt/jgit.git";
        String localPath = "D:\\Jgit\\Trail12";

        Instant start = Instant.now(); // Record start time for both tasks

        // Run the cloning process asynchronously
        CompletableFuture<Void> cloningProcess = CompletableFuture.runAsync(() -> {
            boolean repoExistsLocally = isLocalRepository(new File(localPath));

            if (repoExistsLocally) {
                System.out.println("Repository already exists locally.");
            } else {
                try {
                    cloneRepository(repoURL, localPath);
                    System.out.println("Repository cloned successfully.");
                } catch (GitAPIException e) {
                    e.printStackTrace();
                }
            }
        });

        // Main method logic here (runs concurrently with cloning)
        System.out.println("Main method is executing concurrently.");

        // Wait for both tasks to complete before finishing
        try {
            cloningProcess.get(); // Wait for the cloning process to finish
        } catch (Exception e) {
            e.printStackTrace();
        }

        Instant end = Instant.now(); // Record end time after both tasks complete
        Duration totalTime = Duration.between(start, end);
        System.out.println("Total execution time: " + totalTime.toMillis() + " milliseconds.");
        System.out.println("All tasks have completed.");
    }

    private static boolean isLocalRepository(File localRepo) {
        return localRepo.exists();
    }

    private static void cloneRepository(String repoURL, String localPath) throws GitAPIException {
        UsernamePasswordCredentialsProvider credentialsProvider = new UsernamePasswordCredentialsProvider("ryeso", "ATBBNcHSHpvvZVpJHznPC8pmqL5UF2392D90");

        Git.cloneRepository()
                .setURI(repoURL)
                .setDirectory(new File(localPath))
                .setCredentialsProvider(credentialsProvider)
                .call();
    }
}
 
