
    public List<CodeList> getById(Integer memberId,String name){
        List<CodeList> codeLists=new ArrayList<>();
        try (CSVReader csvReader = new CSVReaderBuilder(new FileReader("H:\\repository\\ixmcm\\src\\main\\resources\\ixmcm_translation_codes\\IXMCM_TRANSLATION_CODES.csv")).build()) {

            Map<String, Integer> headerIndices = new HashMap<>();
            String[] header = csvReader.readNext(); // Read the header row
            if (header != null) {
                for (int i = 0; i < header.length; i++) {
                    headerIndices.put(header[i], i);
                }
                int memberIdIndex=headerIndices.get("MEMBER_ID");
                int nameIndex=headerIndices.get("NAME");
                if (memberIdIndex >= 0) {
                    String[] row;
                    while ((row = csvReader.readNext()) != null) {
                        if (String.valueOf(memberId).equals(row[memberIdIndex]) && name.equals(row[nameIndex])) {
                            CodeList codeList=new CodeList(row[headerIndices.get("MEMBER_VALUE")],row[headerIndices.get("FHLB_VALUE")],row[headerIndices.get("NAME")],row[headerIndices.get("MAP_NAME")],row[headerIndices.get("PLEDGE_TYPE")],Integer.valueOf(row[headerIndices.get("ID")]));
                            codeLists.add(codeList);
                            Collections.sort(codeLists,Comparator.comparing(CodeList::getKey));
                        }
                    }
                }
            }
        } catch (IOException | CsvValidationException e) {
            log.error("Error Fetching the record",e);
        }
        return codeLists;
    }
net.quux00.simplecsv
