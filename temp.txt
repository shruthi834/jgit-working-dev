public String cloneStashRepository() {
        log.info("Started : Executing Clone method");
        // Check if the local folder is empty (no duplicate filenames)
        File localFolder = new File(localClonePath);
        final CloneCommand cloneResults;
        if(isRepoExist()) {
            log.warn("Repo already exists, processing GIT PULL");
            String pullResult = doGitPull();
            return pullResult;
        }
            // Create an ExecutorService with a fixed number of threads
//            ExecutorService executor = Executors.newFixedThreadPool(1);
//            CompletableFuture<Void> cloneFuture = CompletableFuture.runAsync(() -> {
        try {
            Git.cloneRepository()
                    .setURI(stashUrl)
                    .setBranch("refs/heads/feature/jGit-feature")
                    .setDirectory(localFolder)
                    .setCredentialsProvider(
                            new UsernamePasswordCredentialsProvider(stashUsername, stashPassword)
                    )
                    .call();

            log.info("Repository cloned successfully.");
        } catch (JGitInternalException | GitAPIException e) {
            log.error("Git-Clone Fatal Error: ", e);
            throw new RuntimeException(" Fatal errorGit-Clone Fatal Error", e);
        }
        finally {
            Git.shutdown();
        }
//            }, executor);
            // Wait for the cloning process to complete
//            cloneFuture.join();
//            executor.shutdown();
        log.info("Cloning : Cloning method has ended");
        return "";
    }


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 private boolean isRepoExist() {
        try(Repository repo = Git.open(new File(this.localClonePath)).getRepository()) {
            //TODO need to refine t this
            //if (RepositoryCache.FileKey.isGitRepository(new File(this.localClonePath), FS.DETECTED)) {
            // Already cloned. look for successful clone.
            for (Ref ref : repo.getAllRefs().values()) {
                if (ref.getObjectId() == null)
                    continue;
                return Boolean.TRUE;
            }
        }catch(IOException e) {
            log.error(" GIT Repo - Fatal Error", e);
            return Boolean.FALSE;
        }
        return Boolean.FALSE;
    }
